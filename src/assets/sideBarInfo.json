{
    "/stacks" : {
        "text" : "A stack is a fundamental data structure that follows the Last In, First Out (LIFO) principle, resembling a stack of plates or books. It's a collection of elements with two primary operations: push and pop. Let's delve into the mechanics of how a stack works. A stack is typically implemented using an array or a linked list. Each element in the stack is referred to as a node. The top of the stack is the last element added, and the bottom is the first element added. The stack has a fixed capacity in the case of an array-based implementation, while a linked list-based implementation can dynamically adjust to the required size.",
        "link" : "https://m13ha.hashnode.dev/data-structures-stacks-and-queues-i"

    },
    "/queues" : {
        "text" : "A queue is a fundamental data structure that follows the First-In-First-Out (FIFO) principle. It operates much like a real-world queue or line, where the first person to join is the first to be served. In computer science, a queue is used to organize and manage a collection of elements, and the order in which they are added determines the order in which they are processed.Envision a queue as a line of people waiting for a service, such as at a ticket counter. The person who arrives first is the first to be served, and as new individuals join the queue, they stand at the back. Similarly, in a programming context, elements are added to the back (enqueue) and removed from the front (dequeue) of the queue.",
        "link" : "https://m13ha.hashnode.dev/data-structures-stacks-and-queues-i"

    },
    "/lists" : {
        "text" : "A linked list is a fundamental data structure in computer science that organizes and stores data in a linear, sequential manner. Unlike arrays, linked lists do not require contiguous memory locations, allowing for dynamic memory allocation and flexibility in data storage.The basic building blocks of a linked list are nodes, each containing a data element and a reference or link to the next node in the sequence. The last node typically points to null, indicating the end of the list. This sequential arrangement allows for efficient insertion and deletion operations, as it only requires updating the references between adjacent nodes.",
        "link" : "https://m13ha.hashnode.dev/data-structures-linked-list-i"

    },
    "/trees" : {
        "text" : "A linked list is a fundamental data structure in computer science that organizes and stores data in a linear, sequential manner. Unlike arrays, linked lists do not require contiguous memory locations, allowing for dynamic memory allocation and flexibility in data storage.The basic building blocks of a linked list are nodes, each containing a data element and a reference or link to the next node in the sequence. The last node typically points to null, indicating the end of the list. This sequential arrangement allows for efficient insertion and deletion operations, as it only requires updating the references between adjacent nodes.",
        "link" : "https://m13ha.hashnode.dev/data-structures-linked-list-i"

    },
    "/graphs" : {
        "text" : "A linked list is a fundamental data structure in computer science that organizes and stores data in a linear, sequential manner. Unlike arrays, linked lists do not require contiguous memory locations, allowing for dynamic memory allocation and flexibility in data storage.The basic building blocks of a linked list are nodes, each containing a data element and a reference or link to the next node in the sequence. The last node typically points to null, indicating the end of the list. This sequential arrangement allows for efficient insertion and deletion operations, as it only requires updating the references between adjacent nodes.",
        "link" : "https://m13ha.hashnode.dev/data-structures-linked-list-i"

    },
    "/hashtables" : {
        "text" : "A linked list is a fundamental data structure in computer science that organizes and stores data in a linear, sequential manner. Unlike arrays, linked lists do not require contiguous memory locations, allowing for dynamic memory allocation and flexibility in data storage.The basic building blocks of a linked list are nodes, each containing a data element and a reference or link to the next node in the sequence. The last node typically points to null, indicating the end of the list. This sequential arrangement allows for efficient insertion and deletion operations, as it only requires updating the references between adjacent nodes.",
        "link" : "https://m13ha.hashnode.dev/data-structures-linked-list-i"

    }

}